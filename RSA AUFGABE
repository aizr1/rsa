
R S A - V e r f a h r e n
(Java-Übung)
============================

Aufgabe (2. Bedingung zur Prüfungszulassung):
Schreiben Sie ein Java-Programm, das eine Nachricht (repräsentiert durch eine ganze Zahl m )
verschlüsselt (und zwecks Kontrolle wieder entschlüsselt).
Ziel: vollständiges Verständnis des RSA-Verfahrens

Vorbemerkungen:
1.	Diese Übung ist in verschiedenen Schwierigkeitsstufen ausführbar. Wählen Sie zunächst die einfachste Variante, danach ist das Programm ausbaubar.
2.	Es werden die Bezeichnungen aus der Vorlesung benutzt, ohne diese noch einmal zu erklären.

Anleitung:

Verwenden Sie vorzugsweise den Datentyp long .
Geben Sie die beiden Primzahlen p und q mittels IOTools.readlong() ein.
Berechnen Sie n .
Berechnen Sie phi ( Φ in der Vorlesung) .
Geben Sie den Verschlüsselungsschlüssel c ein ( 3 ≤ c < phi ; c und phi teilerfremd).
Geben Sie die zu verschlüsselnde Zahl m ein.

Berechnen Sie

	v(m) = mc mod n

Nutzen Sie dabei aus, dass gilt:

	mc mod n = (m mod n)c mod n

Damit ist die Nachricht verschlüsselt. Geben Sie v(m) aus.

Es folgt die Entschlüsselung von v(m) .
Berechnen Sie den Entschlüsselungsschlüssel d .
Für d muss

	c * d = 1 mod phi	( Java-Notation: c * d % phi == 1 )

gelten. Beginnen Sie mit d = 1 . Solange die Bedingung nicht erfüllt ist, solange also

	c * d % phi != 1

gilt, erhöhen Sie d um 1 . Testen Sie wieder usw. Nun liege d vor.
Berechnen Sie

	m = v(m)d mod n

Vermeiden Sie wieder durch Mehrfachverwendung von mod , dass zu große Zahlen entstehen.
Geben Sie m aus. Der Wert sollte mit der ursprünglichen Zahl m identisch sein.

Verbesserung des Programmes: Berechnen Sie c , statt es einzugeben.

Beginnen Sie mit c = 3 . Prüfen Sie, ob c und phi teilerfremd sind
(PAP oder Struktogramm dazu entwerfen, dann erst programmieren).
Falls ja, dann wird c verwendet.
Falls nein, dann wird c um 1 erhöht und wieder getestet usw.


Noch besser: Berechnen Sie alle Lösungen für c . Wählen Sie zufällig eine aus.

Angenommen, es gibt k potenziell mögliche in einem Vektor w gespeicherte Werte
w[1], ..., w[k] , die als c in Frage kommen.
Bestimmen Sie eine Zufallszahl z ∈ [0,1) (Datentyp von z : double ) durch den Aufruf

	z = Math.random() .

Teilen Sie [0,1) in k gleich große Abschnitte der Länge 1/k .
Bestimmen Sie die Nummer l desjenigen Abschnittes, in dem sich z befindet.
Setzen Sie

	c = w(l) .

Damit ist c zufällig ausgewählt - in Abhängigkeit davon, in welches Teil-Intervall mit der Nummer l der relle Wert z gefallen ist.


Zusatzaufgabe (nur für echte Hacker):

Ermitteln Sie den geheimen Entschlüsselungsschlüssel d aus der öffentlich verfügbaren Information (c,n) .

Zielstellung: Verschaffen Sie sich ein Gefühl für die Sicherheit des RSA-Verfahrens.

Vorgehen:
d ist (wie oben beschrieben) aus

	c * d = 1 mod phi

berechenbar, allerdings ist phi vorerst nicht bekannt, n dagegen schon, wobei

	n = p * q

ist. Hat man die Primzahlen p und q , hat man auch phi wegen

	phi = ( p-1 ) * ( q-1 )

Der Kern des Problems besteht also in der Berechnung von p und q aus n .
Anleitung:
Berechnen Sie alle Primzahlen bis Math.sqrt(n) (größere scheiden aus).
Multiplizieren Sie diese paarweise in allen Kombinationen, bis n herauskommt.
Bemerkung:
Für große Primzahlen p und q ist das Verfahren unglaublich rechenzeitaufwändig.
Genau darauf beruht die Sicherheit des RSA-Verfahrens.
